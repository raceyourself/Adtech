function underad(reconstructUrl, blockedAbsXpath) {
  console.log("FOO underad called. Reconstruct URL: " + reconstructUrl + "; blocked xpath: " + blockedAbsXpath);
  var e = document.evaluate(blockedAbsXpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
  if (e === null || e.singleNodeValue === null) return; // TODO: Recreate from server-side template
  if (hidden(e.singleNodeValue)) recreate(blockedAbsXpath.singleNodeValue, e);
};

// Recreate element e matching blockedAbsXpath
function recreate(reconstructUrl, blockedAbsXpath, e) {
  var request = newHttpObject();
  request.open('GET', reconstructUrl + '?{{timestamp}}', true);
  request.send(null);
  console.log("FOO recreate - " + reconstructUrl + '?{{timestamp}}');
  request.onreadystatechange = function() {
  if (request.readyState == 4)
  console.log("FOO recreate response - " + request.responseText);
    e.innerHTML = request.responseText;
  };
}

// If we end up with more cross-browser compatibility woes, just take the hit and include jQuery.
function newHttpObject() {
  try {return new XMLHttpRequest();}
  catch (error) {}
  try {return new ActiveXObject("Msxml2.XMLHTTP");}
  catch (error) {}
  try {return new ActiveXObject("Microsoft.XMLHTTP");}
  catch (error) {}

  throw new Error("Could not create HTTP request object.");
}

// Is this element hidden or are all its children hidden?
function hidden(el) {
  console.log("FOO hidden " + el);
  
  var selfhidden = (el === null || el.offsetParent === null || el.offsetHeight === 0 || el.offsetWidth === 0);
  if (selfhidden) return selfhidden;

  if (el.tagName.toLowerCase() === 'img' && !isImageOk(el)) return true;   

  // Adblock may have denied access to an ad resource
  var children = el.children;
  if (children.length === 0) return selfhidden;
  for (var i=0, l=children.length; i < l; i++) {
    if (!hidden(children[i])) return false;
  }
  return true;
}

function isImageOk(img) {
    // During the onload event, IE correctly identifies any images that
    // weren't downloaded as not complete. Others should too. Gecko-based
    // browsers act like NS4 in that they report this incorrectly.
    if (!img.complete) {
        return false;
    }

    // However, they do have two very useful properties: naturalWidth and
    // naturalHeight. These give the true size of the image. If it failed
    // to load, either of these should be zero.

    if (typeof img.naturalWidth !== "undefined" && img.naturalWidth === 0) {
        return false;
    }

    // No other way of checking: assume it's ok.
    return true;
}

// Hide iframes that fail to load so we can detect the failures.
var iframes = document.getElementsByTagName('iframe');
for(var i=0, l=iframes.length; i < l; i++) {
  var iframe = iframes[i];

  var hide = function() {
    if(document.readyState === 'complete') iframe.style.setProperty('display', 'none');
  };
  document.addEventListener('readystatechange', hide);

  iframe.addEventListener('load', function() {
    document.removeEventListener('readystatechange', hide);
  });
}

document.addEventListener('readystatechange', function() {
  if(document.readyState === 'complete') {
{{#adverts}}
    underad('{{{encryptedReconstructUrl}}}', '{{{blockedAbsXpathJsEscaped}}}');
{{/adverts}}
  }
});
